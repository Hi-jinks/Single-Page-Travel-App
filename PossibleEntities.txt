Possible JSON entity formats:


{
    "Table Mountain":["Catherine Doo: Lovely hike","Mike: Cable car was overcrowded and there was no where comfortable to sit at the top.","Gavin: Brilliant view!"],
    "Trevi Fountain":["Billie: Overrated"]
}


{
    "Table Mountain": [{"Catherine Doo": "Lovely hike"}, {"Mike":"Cable car was overcrowded and there was no where comfortable to sit at the top."}, {"Gavin":"Brilliant view!"}],
    "Trevi Fountain": [{"Billie":"Overrated"}]
}

{
    "Cape Town":["Table Mountain", "V&A Waterfront", "Boulders Beach"],
    "Rome": ["Trevi Fountain", "Colosseum"]
}


{
    "cities":[
        {"name":"Cape Town", "continent":"Africa", "country":"South Africa", "sites":["Table Mountain", "V&A Waterfront", "Boulders Beach"]},
        {"name":"Rome", "continent":"Europe", "country":"Italy"},
        {"name":"Cairo", "continent":"Africa", "country":"Egypt"}
    ]
}

{
    "cities":[
         {"Africa": [{"name":"Cairo", "country":"Egypt"}, {"name":"Cape Town", "country":"South Africa"}]},
        {"Europe": [{"name":"Rome", "country":"Italy"}]},
        {"Asia": [{"name":"Tokyo", "country":"Japan"}]},
        {"North America": [{"name":"San Francisco", "country":"California"}]},
        {"South Ameria": [{"name":"Rio de Janeiro", "country":"Brazil"}]},
        {"Australia": [{"name":"Sydney", "country":"New South Wales"}]}
    ]
}

creates error:
{
        {"Africa": [{"name":"Cairo", "country":"Egypt"}, {"name":"Cape Town", "country":"South Africa"}]},
        {"Europe": [{"name":"Rome", "country":"Italy"}]},
        {"Asia": [{"name":"Tokyo", "country":"Japan"}]},
        {"North America": [{"name":"San Francisco", "country":"California"}]},
        {"South Ameria": [{"name":"Rio de Janeiro", "country":"Brazil"}]},
        {"Australia": [{"name":"Sydney", "country":"New South Wales"}]}
}

[
        {"Africa": [{"name":"Cairo", "country":"Egypt"}, {"name":"Cape Town", "country":"South Africa"}]},
        {"Europe": [{"name":"Rome", "country":"Italy"}]},
        {"Asia": [{"name":"Tokyo", "country":"Japan"}]},
        {"North America": [{"name":"San Francisco", "country":"California"}]},
        {"South Ameria": [{"name":"Rio de Janeiro", "country":"Brazil"}]},
        {"Australia": [{"name":"Sydney", "country":"New South Wales"}]}
]

In listCities.js:

/*
async function listCities (continent) {
    const cityResponse = await fetch(`http://127.0.0.1:8090/cities/${continent}`);
    const cityNamesText = await cityResponse.text();
    const cityNames = JSON.parse(cityNamesText);
    const cityListElt = document.getElementById('list_african_cities');
    let list = '';
    for (const cityName of cityNames) {
        list += `<li class='city_list_item'>${cityName}</li>`;
    }
    cityListElt.innerHTML = list;
    const listItems = document.querySelectorAll('.city_list_item');
    for (const listItem of listItems) {
        listItem.addEventListener('click', (event) => loadCity(event.target.textContent));
    } 
}

let africa_button = document.getElementById('african_cities');

africa_button.addEventListener('click', async function listCity (event){
    const cityResponse = await fetch(`http://127.0.0.1:8090/cities`);
    let body = await response.text();
    document.getElementById('list_african_cities').innerHTML = body;
})

document.addEventListener('DOMContentLoaded', listCities);
document.addEventListener('DOMContentLoaded', listCity);

*/

In app.js:

/* To list cities 
app.get('/cities/:continent', function (req, resp) {
    const cityText = cities[0]
    resp.send(cityText);
});

app.get('/cities', function(req, resp) {
    const cityKeys = Object.keys(cities);
    resp.send(cityKeys); 
}) */

/* To list countries for a continent 
app.get('/africanCountry/:country', function(req,resp){
    searchParam = req.params.country;
    console.log(searchParam);
    const countries = cities["Africa"];
    for (country in countries){
        if (country.name==searchParam){
            result = country.name;
        }
    }
    var resultText = JSON.stringify(result)
    resp.send(result)
}) */


app.js is API

Show it's asynchronous in video using dev tools 

Nodemon means server restarts whenever files are changed, so you don't have to do it. Installation in lecture 28/11/2022 at 30:06.
Can put "start": "nodemon server.js"
